{{>partial_header}}
package {{packageName}}

import (
	"errors"
	"fmt"
	"net/http"
	"strings"
)

var (
	// ErrTypeAssertionError is thrown when type an interface does not match the asserted type
	ErrTypeAssertionError = errors.New("unable to assert type")
)

// ParsingError indicates that an error has occurred when parsing request parameters
type ParsingError struct {
	Err error
}

func (e *ParsingError) Unwrap() error {
	return e.Err
}

func (e *ParsingError) Error() string {
	return e.Err.Error()
}

// RequiredError indicates that an error has occurred when parsing request parameters
type RequiredError struct {
	Field string
}

func (e *RequiredError) Error() string {
	return fmt.Sprintf("required field '%s' is zero value.", e.Field)
}

// ErrorHandler defines the required method for handling error. You may implement it and inject this into a controller if
// you would like errors to be handled differently from the DefaultErrorHandler
type ErrorHandler func(w http.ResponseWriter, r *http.Request, err error, result *ImplResponse)

// DefaultErrorHandler defines the default logic on how to handle errors from the controller. Any errors from parsing
// request params will return a StatusBadRequest. Otherwise, the error code originating from the servicer will be used.
func DefaultErrorHandler(w http.ResponseWriter, r *http.Request, err error, result *ImplResponse) {
	if _, ok := err.(*ParsingError); ok {
		// Handle parsing errors
		encodeErrorResponse(w, r, err, http.StatusBadRequest)
	} else if _, ok := err.(*RequiredError); ok {
		// Handle missing required errors
		encodeErrorResponse(w, r, err, http.StatusUnprocessableEntity)
	} else {
		// Handle all other errors
		encodeErrorResponse(w, r, err, result.Code)
	}
}

func encodeErrorResponse(w http.ResponseWriter, r *http.Request, err error, statusCode int) {
	contentType := r.Header["Content-Type"]
	if len(contentType) > 0 && strings.Contains(contentType[0], "text/x-yaml") {
		EncodeYAMLResponse(err.Error(), &statusCode, w)
	} else {
		EncodeJSONResponse(err.Error(), &statusCode, w)
	}
}

